"""
Django settings for imposterwho project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url

if os.path.isfile("env.py"):
    # DO NOT REMOVE
    import env

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "")

# SECURITY WARNING: don't run with debug turned on in production!
IN_DEVELOPMENT = os.environ.get("IN_DEVELOPMENT", "False").strip().lower() == "true"
DEBUG = IN_DEVELOPMENT
DEBUG_PROPAGATE_EXCEPTIONS = True

ALLOWED_HOSTS = []

# Deployment

if DEBUG:
    # IDE
    gitpod_url = os.environ.get("GITPOD_WORKSPACE_URL")
    if gitpod_url:
        ALLOWED_HOSTS.append(gitpod_url)
else:
    # Heroku
    heroku_hostname = os.environ.get("HEROKU_HOSTNAME")
    if heroku_hostname:
        ALLOWED_HOSTS.append(heroku_hostname)

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    # utilities
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "django_summernote",
    "crispy_forms",
    "crispy_bootstrap5",
    # AWS3
    "storages",
    # apps
    "admin_dashboard",
    "user_dashboard",
    "quiz_play",
    "homepage",
    "game",
    "contact_us",
    "chat",
]


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

TEMPLATES_DIR = os.path.join(BASE_DIR, "templates")



MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = "imposterwho.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "imposterwho.wsgi.application"

# CSRF Trusted Origins

CSRF_TRUSTED_ORIGINS = []


def add_to_trusted_origins(origin_list, origin):
    """
    Adds a given origin to the list of trusted origins.

    If the provided origin does not start with "http://" or "https://",
    it prepends "https://" to the origin before adding it to the list.

    Parameters:
        origin_list (list): The list to which the origin will be added.
        origin (str): The origin to be added to the trusted origins.
    """
    if origin and not origin.startswith(("http://", "https://")):
        origin = "https://" + origin
    origin_list.append(origin)


if DEBUG:
    # Gitpod
    gitpod_url = os.environ.get("GITPOD_WORKSPACE_URL")
    if gitpod_url:
        add_to_trusted_origins(CSRF_TRUSTED_ORIGINS, gitpod_url)
else:
    # Heroku
    heroku_hostname = os.environ.get("HEROKU_HOSTNAME")
    if heroku_hostname:
        add_to_trusted_origins(CSRF_TRUSTED_ORIGINS, heroku_hostname)

# Authentication

AUTH_USER_MODEL = "homepage.UserProfile"

if DEBUG:
    SITE_ID = 2  # ID for development domain
else:
    SITE_ID = 2  # ID for Production domain

ACCOUNT_LOGIN_METHODS = {
    "email",
}
ACCOUNT_SIGNUP_FIELDS = [
    "email*",
]
# ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_SIGNUP_FIELDS = ["email*", "email2*"]
ACCOUNT_USERNAME_MIN_LENGTH = 4
LOGIN_URL = "/account/login/"
LOGIN_REDIRECT_URL = "role_redirect"
LOGOUT_REDIRECT_URL = "/"

ACCOUNT_LOGIN_REDIRECT_URL = "role_redirect"

SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "APP": {
            "client_id": os.environ.get("GOOGLE_OAUTH_CLIENT_ID"),
            "secret": os.environ.get("GOOGLE_OAUTH_SECRET"),
            "key": "",
        }
    }
}

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

if DEBUG:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    DATABASES = {
        "default": dj_database_url.parse(os.environ.get("DATABASE_URL", "")),
    }

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"),)
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# AWS S3 Integration
AWS_STORAGE_BUCKET_NAME = None
AWS_CLOUD_FRONT = None
AWS_S3_REGION_NAME = None

USE_AWS = os.environ.get("USE_AWS", "False") == "True"

if USE_AWS:
    STORAGES = {
        "default": {
            "BACKEND": "custom_storages.MediaStorage",
            "OPTIONS": {
                "location": "media",
            },
        },
        "staticfiles": {
            "BACKEND": "custom_storages.StaticStorage",
            "OPTIONS": {
                "location": "static",
            },
        },
    }

    # Static and media files
    STATICFILES_LOCATION = "static"
    MEDIAFILES_LOCATION = "media"

    # Cache control
    AWS_S3_OBJECT_PARAMETERS = {
        "Expires": "Thu, 31 Dec 2099 20:00:00 GMT",
        "CacheControl": "max-age=94608000",
    }

    # Keys
    AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")

    # Bucket Config
    AWS_STORAGE_BUCKET_NAME = os.environ.get("AWS_STORAGE_BUCKET_NAME")
    AWS_CLOUD_FRONT = os.environ.get("AWS_CLOUD_FRONT", "False")
    AWS_S3_REGION_NAME = os.environ.get("AWS_S3_REGION_NAME", "False")
    CLOUDFRONT_BUILD_DOMAIN = f"{AWS_CLOUD_FRONT}.cloudfront.net"

    prep_region = AWS_S3_REGION_NAME.strip().lower()
    no_region_needed = prep_region in ("false")

    if no_region_needed:
        AWS_S3_BUILD_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"
    else:
        AWS_S3_BUILD_DOMAIN = (
            f"{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com"
        )

    # Use CloudFront URL or AWS3 for Static and Media files
    if AWS_CLOUD_FRONT and AWS_CLOUD_FRONT != "False":
        AWS_S3_CUSTOM_DOMAIN = CLOUDFRONT_BUILD_DOMAIN
        STATIC_URL = f"https://{CLOUDFRONT_BUILD_DOMAIN}/{STATICFILES_LOCATION}/"
        MEDIA_URL = f"https://{CLOUDFRONT_BUILD_DOMAIN}/{MEDIAFILES_LOCATION}/"
    else:
        AWS_S3_CUSTOM_DOMAIN = AWS_S3_BUILD_DOMAIN
        STATIC_URL = f"https://{AWS_S3_BUILD_DOMAIN}/{STATICFILES_LOCATION}/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# SMTP

DEFAULT_FROM_EMAIL = os.environ.get("DEFAULT_FROM_EMAIL", "test@mail.com")

if DEBUG:
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
else:
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_USE_TLS = True
    EMAIL_PORT = int(os.environ.get("EMAIL_PORT", 587))
    EMAIL_HOST = "smtp.gmail.com"
    EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
    EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASS")

# AI - LLM Interaction
TOGETHER_API_KEY = os.environ.get("TOGETHER_API_KEY")
AI_MODEL = os.environ.get("AI_MODEL")

# Debugging

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
        },
        "file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": "django_debug.log",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["file"],  # could also "console",
            "level": "DEBUG",
            "propagate": True,
        },
    },
}

os.environ["RECAPTCHA_SECRET_KEY"] = "6LckBx8rAAAAAM7eZQTK9XGQAFZUWHpOzH8vfev5"
os.environ["RECAPTCHA_SITE_KEY"] = "6LckBx8rAAAAAKP0z3s87sLFwjktLaLKwSiq856s"